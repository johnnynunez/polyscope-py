name: Build and Publish

# NOTE: build logic is duplicated here and in test_build.yml

# Run on the main branch for commits only
on:
  push:
    branches:     
      - master

jobs:
  build_wheels:

    # only run if the most recent commit contains '[ci publish]'
    if: "contains(github.event.head_commit.message, '[ci publish]')"

    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: macos-latest
            cibw-arch: macosx_arm64
          - runs-on: macos-latest
            cibw-arch: macosx_universal2
          - runs-on: windows-latest
            cibw-arch: win_amd64
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86

    name: Build wheels ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    env:
      CIBW_BUILD_VERBOSITY: 3
      CIBW_BEFORE_BUILD_LINUX : "yum remove -y cmake && yum install -y libX11-devel libXcursor-devel libXrandr-devel libXinerama-devel mesa-libGL-devel mesa-libGL libXi-devel freeglut-devel mesa-libEGL-devel"
      CIBW_SKIP: "cp36-* cp313-*" # skip python 13 for now, builds failing

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Package source distribution
        if: runner.os == 'Linux'
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v2.21 
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BEFORE_BUILD_LINUX : "yum remove -y cmake && yum install -y libX11-devel libXcursor-devel libXrandr-devel libXinerama-devel mesa-libGL-devel mesa-libGL libXi-devel freeglut-devel mesa-libEGL-devel"
          CIBW_SKIP: "cp36-* cp313-*" # skip python 13 for now, builds failing
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2

      # Upload binaries to the github artifact store
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: |
            ./wheelhouse/*.whl 
            ./wheelhouse/*.tar.gz 

  # Push the resulting binaries to pypi on a tag starting with 'v'
  upload_pypi:
    name: Upload release to PyPI

    # only run if the most recent commit contains '[ci publish]'
    if: "contains(github.event.head_commit.message, '[ci publish]')"

    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/polyscope
    permissions: # we authenticate via PyPI's 'trusted publisher' workflow, this permission is required
      id-token: write
    steps:
      - name: Download built wheels artifact # downloads from the jobs storage from the previous step
        uses: actions/download-artifact@v4.1.7
        with:
          name: artifact
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
          # To test: repository_url: https://test.pypi.org/legacy/

